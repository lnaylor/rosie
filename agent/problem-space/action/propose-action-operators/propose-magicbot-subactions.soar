## op_go-to1
sp {propose*op_go-to1
   (state <s> ^problem-space <ps>
              ^world.objects.object <loc>
             -^world.robot.current-location <loc>)
   (<ps> ^name action
         ^propose-action-operators true)
  (<loc> ^predicates.category location)
-->
   (<s> ^operator <o> +)
   (<o> ^name op_go-to1
        ^action-handle go-to1
         ^arg2 <arg2>)
   (<arg2> ^arg-type predicate
           ^handle to1
           ^2 <loc>)
}

## op_pick-up1
sp {composite-propose*op_pick-up1*mobile
   (state <s> ^problem-space <ps>
              ^world.objects.object <obj>
             -^world.objects.object.predicates.arm-status grabbed)
   (<ps> ^name action
         ^propose-action-operators true)
   (<obj> ^predicates <preds>)
   (<preds> ^category object
            ^visible true
            ^arm-status not-grabbed)
-->
   (<s> ^operator <op> +)
   (<op> ^name op_pick-up1 
         ^action-handle pick-up1
         ^arg1 <arg1>)
   (<arg1> ^arg-type object
           ^id <obj>)
}

## op_put-down1
sp {composite-propose*op_put-down1
   (state <s> ^problem-space <ps>
              ^world.objects.object <obj>)
   (<ps> ^name action
         ^propose-action-operators true)
   (<obj> ^predicates.arm-status grabbed)
-->
   (<s> ^operator <op> +)
   (<op> ^name op_put-down1
         ^action-handle put-down1
         ^arg1 <arg1>)
   (<arg1> ^arg-type object
           ^id <obj>)
}

sp {composite-propose*op_give1
   (state <s> ^problem-space <ps>
              ^world.objects.object <obj1>
              ^world.objects.object <person>)
   (<ps> ^name action
         ^propose-action-operators true)
   (<obj1> ^predicates.arm-status grabbed)
   (<person> ^predicates.visible true
             ^predicates.category person)
-->
   (<s> ^operator <op> +)
   (<op> ^name op_give1
         ^action-handle give1
         ^arg1 <arg1>
         ^arg2 <arg2>)
   (<arg1> ^arg-type object
           ^id <obj1>)
   (<arg2> ^arg-type predicate
           ^handle to1
           ^2 <person>)
}

sp {action*subaction-proposals*magicbot*propose*op_find
   (state <s> ^problem-space <ps>
              ^world.objects.object <obj>)
   (<ps> ^name action
         ^propose-action-operators true)
   (<obj> ^predicates.visible false)
-->
   (<s> ^operator <op> +)
   (<op> ^name op_find1
         ^action-handle find1
         ^arg1 <arg1>)
   (<arg1> ^arg-type object
           ^id <obj>)
}

###################################################################
#
# problem-space.propose-driving-operators << true false >>
#   If true, proposes operators for driving actions
#      turn, orient, follow-wall, stop
#   These do not have action models or preconditions
#       (Only proposed when trying to match a primitive action command)
#
###################################################################


## op_turn
sp {composite-propose*driving-operator*op_turn1
   (state <s> ^problem-space <ps>)
   (<ps> ^name action
         ^propose-action-operators true
         ^propose-driving-operators true)
-->
   (<s> ^operator <oleft> +
        ^operator <oright> +
        ^operator <oaround> +)
   (<oleft> ^name op_turn1
          ^action-handle turn1
          ^arg1 <left-arg1>)
   (<left-arg1> ^arg-type concept ^handle left1)
   
   (<oright> ^name op_turn1
             ^action-handle turn1
             ^arg1 <right-arg1>)
   (<right-arg1> ^arg-type concept ^handle right1)
   
   (<oaround> ^name op_turn1
             ^action-handle turn1
             ^arg1 <around-arg1>)
   (<around-arg1> ^arg-type concept ^handle around1)
}

## op_follow-wall1
sp {composite-propose*driving-operator*op_follow-wall1
   (state <s> ^problem-space <ps>)
   (<ps> ^name action
         ^propose-action-operators true
         ^propose-driving-operators true)
-->
   (<s> ^operator <left-op> +
        ^operator <right-op> +)
   (<left-op> ^name op_follow-wall1
              ^action-handle follow-wall1
              ^arg1 <left-arg1>)
   (<left-arg1> ^arg-type object ^arg-status abstract ^id <left-wall>)
   (<left-wall> ^item-type object ^predicates <left-preds>)
   (<left-preds> ^category object ^relative-direction1 left1 ^spatial-shape wall1)

   (<right-op> ^name op_follow-wall1
               ^action-handle follow-wall1
               ^arg1 <right-arg1>)
   (<right-arg1> ^arg-type object ^arg-status abstract ^id <right-wall>)
   (<right-wall> ^item-type object ^predicates <right-preds>)
   (<right-preds> ^category object ^relative-direction1 right1 ^spatial-shape wall1)
}

## op_orient1
sp {composite-propose*driving-operator*op_orient1*each*direction
   (state <s> ^problem-space <ps>)
   (<ps> ^name action
         ^propose-action-operators true
         ^propose-driving-operators true)
-->
   (<s> ^operator <on> +
        ^operator <os> +
        ^operator <oe> +
        ^operator <ow> +)

   (<on> ^name op_orient1
         ^action-handle orient1
         ^arg1 <n-arg1>)
   (<n-arg1> ^arg-type concept ^handle north1)

   (<os> ^name op_orient1
         ^action-handle orient1
         ^arg1 <s-arg1>)
   (<s-arg1> ^arg-type concept ^handle south1)

   (<oe> ^name op_orient1
         ^action-handle orient1
         ^arg1 <e-arg1>)
   (<e-arg1> ^arg-type concept ^handle east1)

   (<ow> ^name op_orient1
         ^action-handle orient1
         ^arg1 <w-arg1>)
   (<w-arg1> ^arg-type concept ^handle west1)
}

## op_stop1
sp {composite-propose*driving-operator*op_stop1
   (state <s> ^problem-space <ps>)
   (<ps> ^name action
         ^propose-action-operators true
         ^propose-driving-operators true)
-->
   (<s> ^operator <o> +)
   (<o> ^name op_stop1 
        ^action-handle stop1)
}

## op_drive-forward1
sp {composite-propose*driving-operator*op_drive-forward1
   (state <s> ^problem-space <ps>)
   (<ps> ^name action
         ^propose-action-operators true
         ^propose-driving-operators true)
-->
   (<s> ^operator <drive-op> +)
   (<drive-op> ^name op_drive-forward1
               ^action-handle drive-forward1)
}

## op_scan1
sp {composite-propose*driving-operator*op_scan1
   (state <s> ^problem-space <ps>)
   (<ps> ^name action
         ^propose-action-operators true
         ^propose-driving-operators true)
-->
   (<s> ^operator <scan-op> +)
   (<scan-op> ^name op_scan1
              ^action-handle scan1)
}

## op_face1
sp {composite-propose*driving-operator*op_face1
   (state <s> ^problem-space <ps>
              ^world.objects.object <obj>
              ^world.robot.current-location <cur-loc>
              ^world.predicates.predicate <in-pred>)
   (<ps> ^name action
         ^propose-action-operators true
         ^propose-driving-operators true)
   (<obj> ^predicates <preds>)
  (<preds> ^category << object person >>
            ^arm-status not-grabbed)
   (<in-pred> ^handle in1
              ^instance <i>)
   (<i> ^1 <obj> ^2 <cur-loc>)
-->
   (<s> ^operator <scan-op> +)
   (<scan-op> ^name op_face1
              ^action-handle face1
              ^arg1 <obj-arg>)
   (<obj-arg> ^arg-type object
              ^id <obj>)
}

## op_go-to1 for an object
sp {propose*op_go-to1*object
   (state <s> ^problem-space <ps>
              ^world.objects.object <obj>)
   (<ps> ^name action
         ^propose-action-operators true
         ^propose-driving-operators true)
  (<obj> ^predicates.category << person object >> )
-->
   (<s> ^operator <o> +)
   (<o> ^name op_go-to1
        ^action-handle go-to1
         ^arg2 <arg2>)
   (<arg2> ^arg-type predicate
           ^handle to1
           ^2 <obj>)
}

## op_follow-person1
sp {composite-propose*op_follow-person1
   (state <s> ^problem-space <ps>
              ^world.objects.object <person>)
   (<ps> ^name action
         ^propose-action-operators true
         ^propose-driving-operators true)
  (<person> ^predicates <preds>)
  (<preds> ^category person
           ^visible true)
-->
   (<s> ^operator <op> +)
   (<op> ^name op_follow-person1
         ^action-handle follow-person1
         ^arg1 <arg1>)
   (<arg1> ^arg-type object
           ^id <person>)
}

sp {composite-propose*driving-operator*op_explore
   (state <s> ^problem-space <ps>)
   (<ps> ^name action
         ^propose-action-operators true
         ^propose-driving-operators true)
-->
   (<s> ^operator <o> +)
   (<o> ^name op_explore1
        ^action-handle explore1)
}

## op_start-leading1
sp {composite-propose*op_start-leading1
   (state <s> ^problem-space <ps>
              ^world.objects.object <person>)
   (<ps> ^name action
         ^propose-action-operators true)
  (<person> ^predicates <preds>)
  (<preds> ^category person
           ^visible true
           -^robot-status leading)
-->
   (<s> ^operator <op> +)
   (<op> ^name op_start-leading1
         ^action-handle start-leading1
         ^arg1 <arg1>)
   (<arg1> ^arg-type object
           ^id <person>)
}

## op_stop-leading1
sp {composite-propose*op_stop-leading1
   (state <s> ^problem-space <ps>
              ^world.objects.object <person>)
   (<ps> ^name action
         ^propose-action-operators true)
  (<person> ^predicates <preds>)
  (<preds> ^category person
           ^robot-status leading)
-->
   (<s> ^operator <op> +)
   (<op> ^name op_stop-leading1
         ^action-handle stop-leading1
         ^arg1 <arg1>)
   (<arg1> ^arg-type object
           ^id <person>)
}
