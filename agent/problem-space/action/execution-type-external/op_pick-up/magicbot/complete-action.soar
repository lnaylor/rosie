sp {op_pick-up1*magicbot*apply*complete-action*remove*in*predicate
   (state <s> ^name op_pick-up1
              ^operator <o>
              ^target-object <obj>
              ^top-state.world.predicates.predicate <in-pred>
              ^top-state.world.robot.current-location <loc>)
   (<o> ^name complete-action
        ^status success)
   (<in-pred> ^handle in1
              ^instance <i>)
   (<i> ^1 <obj> ^2 <loc>)
-->
   (<in-pred> ^instance <i> -)
}


sp {op_pick-up1*magicbot*apply*complete-action*remove*holding*predicate
   (state <s> ^name op_pick-up1
              ^operator <o>
              ^target-object <obj>
              ^top-state.world.predicates.predicate <in-pred>)
   (<o> ^name complete-action
        ^status success)
   (<in-pred> ^handle holding1
              ^instance <i>)
   (<i> ^1 <obj> ^2 <person>)
-->
   (<in-pred> ^instance <i> -)
}


#sp {op_pick-up1*magicbot*apply*complete-action*add*grabbed
#   (state <s> ^problem-space.name execute-primitive-action
#               ^action-handle pick-up1
#              ^operator.name complete-action
#              ^target-object.predicates <preds>)
#   (<preds> ^arm-status moving)
#-->
#   (<preds> ^arm-status moving -
#            ^arm-status grabbed)
#}
#
#sp {op_pick-up1*magicbot*apply*complete-action*move*belief*to*arm
#   (state <s> ^problem-space.name execute-primitive-action
#               ^action-handle pick-up1
#              ^operator.name complete-action
#              ^target-object.svs-obj.id <id>
#              ^perception-monitor.input-link.self.pose <pose>
#              ^top-state.svs.command <cmd>)
#   (<pose> ^x <x> ^y <y> ^z <z>)
#-->
#   (<cmd> ^set_transform <xform>)
#   (<xform> ^id <id>
#            ^position <pos>)
#   (<pos> ^x <x> ^y <y> ^z <z>)
#}
