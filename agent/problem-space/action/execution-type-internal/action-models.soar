#####################################################
# apply subaction you perform once

sp {action*apply*subaction*mark*performed
   (state <s> ^problem-space.name action
              ^problem-space.execution-type internal
              ^operator <o>
              ^action-operator <op>)
   (<o> ^subaction-handle { <sub-handle> <> none }
        ^perform once)
-->
   (<op> ^performed <sub-handle>)
}

######################################################
# custom action models

sp {action*internal*apply*subcation*add*object*1
   (state <s> ^problem-space.name action
              ^problem-space.execution-type internal
              ^operator <o>
              ^action-id.procedural.subaction <sub>
              ^world.objects <objs>)
   (<sub> ^handle <handle>
          ^model.add-object <obj>)
   (<o> ^subaction-handle <handle>)
  (<obj> ^{ <prop1>             } <pred1>
         -^{ <prop2> <> <prop1> } <pred2>)
-->
   (<objs> ^object <new>)
   (<new> ^handle (make-constant-symbol |obj-hand|)
          ^item-type object
          ^predicates <preds>)
   (<preds> ^<prop1> <pred1>
            ^visible true
            ^arm-status not-grabbed)
}

sp {action*internal-execution*apply*subcation*add*object*2
   (state <s> ^problem-space.name action
              ^problem-space.execution-type internal
              ^operator <o>
              ^action-id.procedural.subaction <sub>
              ^world.objects <objs>)
   (<sub> ^handle <handle>
          ^model.add-object <obj>)
   (<o> ^subaction-handle <handle>)
  (<obj> ^{ <prop1>           } <pred1>
         ^{ <prop2> > <prop1> } <pred2>
         -^{ <prop3> <> <prop2> <> <prop1> } <pred3>)
-->
   (<objs> ^object <new>)
   (<new> ^handle (make-constant-symbol |obj-hand|)
          ^item-type object
          ^predicates <preds>)
   (<preds> ^<prop1> <pred1>
            ^<prop2> <pred2>
            ^visible true
            ^arm-status not-grabbed)
}

sp {action*internal-execution*apply*subcation*add*object*3
   (state <s> ^problem-space.name action
              ^problem-space.execution-type internal
              ^operator <o>
              ^action-id.procedural.subaction <sub>
              ^world.objects <objs>)
   (<sub> ^handle <handle>
          ^model.add-object <obj>)
   (<o> ^subaction-handle <handle>)
  (<obj> ^{ <prop1>           } <pred1>
         ^{ <prop2> > <prop1> } <pred2>
         ^{ <prop3> > <prop2> } <pred3>
         -^{ <prop4> <> <prop3> <> <prop2> <> <prop1> } <pred4>)
-->
   (<objs> ^object <new>)
   (<new> ^handle (make-constant-symbol |obj-hand|)
          ^item-type object
          ^predicates <preds>)
   (<preds> ^<prop1> <pred1>
            ^<prop2> <pred2>
            ^<prop3> <pred3>
            ^visible true
            ^arm-status not-grabbed)
}

#######################################################
## op_go-to1

# add the location as the new current-location
#   and mark it visible
sp {action*apply*go-to-location*do*action-model*add*new*location
   (state <s> ^problem-space.name action
              ^problem-space.execution-type internal
              ^operator <o>
              ^world.robot <robot>)
   (<o> ^name op_go-to1
        ^arg2.2 <new-loc>)
   (<new-loc> ^predicates <preds>)
-->
   (<robot> ^current-location <new-loc>)
   (<preds> ^visible false -
            ^visible true)
}

# remove the old current-location
#   and mark it not visible
sp {action*apply*go-to-location*do*action-model*remove*old*location
   (state <s> ^problem-space.name action
              ^problem-space.execution-type internal
              ^operator <o>
              ^world.robot <robot>)
   (<o> ^name op_go-to1
        ^arg2.2 <new-loc>)
   (<robot> ^current-location { <old-loc> <> <new-loc> })
   (<old-loc> ^predicates <preds>)
-->
   (<robot> ^current-location <old-loc> -)
   (<preds> ^visible true -
            ^visible false)
}

# Any objects that are in the new location are marked as visible
sp {action*apply*go-to-location*do*action-model*mark*new*object*visible
   (state <s> ^problem-space.name action
              ^problem-space.execution-type internal
              ^operator <o>
              ^world <world>)
   (<o> ^name op_go-to1
        ^arg2.2 <new-loc>)
   (<world> ^predicates.predicate <in-pred>
            ^objects.object <obj>)
   (<in-pred> ^handle in1
              ^instance <i>)
   (<i> ^1 <obj> ^2 <new-loc>)
   (<obj> ^predicates <preds>)
-->
   (<preds> ^visible false -
            ^visible true)
}

# Any objects that are in the old location are marked as not visible
sp {action*apply*go-to-location*do*action-model*mark*old*objects*not*visible
   (state <s> ^problem-space.name action
              ^problem-space.execution-type internal
              ^operator <o>
              ^world <world>)
   (<o> ^name op_go-to1
        ^arg2.2 <new-loc>)
   (<world> ^predicates.predicate <in-pred>
            ^objects.object <obj>)
   (<in-pred> ^handle in1
              ^instance <i>)
   (<i> ^1 <obj> ^2 { <old-loc> <> <new-loc> })
   (<obj> ^predicates <preds>)
-->
   (<preds> ^visible true -
            ^visible false)
}


###############################################
## pick-up

# Mark the object as grabbed
sp {action*apply*pickup*do*action-model
   (state <s> ^problem-space.name action
              ^problem-space.execution-type internal
          ^operator <op>)
   (<op> ^name op_pick-up1
     ^arg1.id.predicates <preds>)
   (<preds> ^arm-status not-grabbed)
-->
   (<preds> ^arm-status grabbed
            ^arm-status not-grabbed -)
}

# Remove any relations the object has
sp {action*apply*pickup*do*action-model*remove*relations*1
   (state <s> ^problem-space.name action
              ^problem-space.execution-type internal
              ^operator <o>
              ^world.predicates.predicate <pred>)
   (<o> ^name op_pick-up1
        ^arg1.id <obj>)
   (<pred> ^handle <any>
           ^instance <i>)
   (<i> ^1 <obj> ^2 <other>)
-->
   (<pred> ^instance <i> -)
}

sp {action*apply*pickup*do*action-model*remove*relations*2
   (state <s> ^problem-space.name action
              ^problem-space.execution-type internal
              ^operator <o>
              ^world.predicates.predicate <pred>)
   (<o> ^name op_pick-up1
        ^arg1.id <obj>)
   (<pred> ^handle <any>
           ^instance <i>)
   (<i> ^1 <other> ^2 <obj>)
-->
   (<pred> ^instance <i> -)
}


##############################################
# put-down

# Mark the object as not-grabbed
sp {action*apply*putdown*do*action-model*arm-status
   (state <s> ^problem-space.name action
              ^problem-space.execution-type internal
               ^operator <o>)
   (<o> ^name op_put-down1
        ^arg1.id.predicates <obj1-preds>)
   (<obj1-preds> ^arm-status grabbed)
-->
   (<obj1-preds> ^arm-status grabbed -)
   (<obj1-preds> ^arm-status not-grabbed)
}

# Add the expected relation from the arg2
sp {action*apply*putdown*do*action-model*on
   (state <s> ^problem-space.name action
              ^problem-space.execution-type internal
              ^operator <o>
              ^world.predicates.predicate <pred>)
   (<o> ^name op_put-down1
        ^arg1.id <obj1>
        ^arg2.{2} <obj2>
        ^arg2.handle <pred-handle>)
   (<pred> ^handle <pred-handle>)
   (<obj1> ^predicates.arm-status grabbed)
-->
   (<pred> ^instance <i>)
   (<i> ^1 <obj1> ^2 <obj2>)
}

# Add the in relation for the current-location
sp {action*apply*put-down*do*action-model*add*in*relation
   (state <s> ^problem-space.name action
              ^problem-space.execution-type internal
              ^operator <o>
              ^world.robot.current-location <loc>
              ^world.predicates.predicate <pred>)
   (<o> ^name op_put-down1
        ^arg1.id <obj>
       -^arg2)
   (<pred> ^handle in1)
-->
   (<pred> ^instance <i>)
   (<i> ^1 <obj> ^2 <loc>)
}

##############################################
# give

sp {action*apply*give*do*action-model*add*holding*relation
   (state <s> ^problem-space.name action
              ^problem-space.execution-type internal
              ^operator <o>
              ^world.predicates.predicate <pred>)
   (<o> ^name op_give1
        ^arg1.id <obj>
        ^arg2.{2} <person>)
   (<pred> ^handle holding1)
-->
   (<pred> ^instance <i>)
   (<i> ^1 <person> ^2 <obj>)
}

###############################################
# find
sp {action*apply*find*do*action-model*mark*visible
   (state <s> ^problem-space.name action
              ^problem-space.execution-type internal
              ^operator <o>)
   (<o> ^name op_find1
        ^arg1.id <obj>)
   (<obj> ^predicates <preds>)
-->
   (<preds> ^visible true
           ^visible false -)
}

sp {action*apply*find*do*action-model*mark*invisible
   (state <s> ^problem-space.name action
              ^problem-space.execution-type internal
              ^operator <o>
              ^world.objects.object { <other> <> <obj> })
   (<o> ^name op_find1
        ^arg1.id <obj>)
   (<other> ^predicates <preds>)
-->
   (<preds> ^visible false
           ^visible true -)
}


sp {action*apply*op_find*do*action-model*remove*old*location
   (state <s> ^problem-space.name action
              ^problem-space.execution-type internal
              ^operator.name op_find1
              ^world.robot <robot>)
   (<robot> ^current-location <loc>)
-->
   (<robot> ^current-location <loc> -)
}

sp {action*apply*op_find*do*action-model*remove*in*preds
   (state <s> ^problem-space.name action
              ^problem-space.execution-type internal
              ^operator.name op_find1
              ^world.robot <robot>
              ^world.predicates.predicate <in-pred>)
   (<robot> ^current-location <loc>)
   (<in-pred> ^handle in1
              ^instance <i>)
   (<i> ^2 <loc>)
-->
   (<in-pred> ^instance <i> -)
}

##################################################
# remember

## Adds source on the 2nd argument
sp {action*apply*remember*do*action-model
   (state <s> ^problem-space.name action
              ^problem-space.execution-type internal
              ^operator <op>)
   (<op> ^name op_remember1
         ^arg1.id <arg1>
         ^arg2.id <arg2>)
   (<arg1> ^predicates <preds>)
   (<arg2> ^predicates.<att> <val>)
-->
   (<preds> ^<att> <val>)
}

##################################################

sp {action*internal-execution*apply*start-leading*do*action-model
  (state <s> ^problem-space.name action
             ^problem-space.execution-type internal
             ^operator <o>)
  (<o> ^name op_start-leading1
       ^arg1.id.predicates <preds>)
-->
  (<preds> ^robot-status leading)
}

# Remove any relations the person has
sp {action*internal-execution*apply*start-leading*do*action-model*remove*relations
   (state <s> ^problem-space.name action
              ^problem-space.execution-type internal
              ^operator <o>
              ^world.predicates.predicate <pred>)
   (<o> ^name op_start-leading1
        ^arg1.id <person>)
   (<pred> ^handle <any>
           ^instance <i>)
   (<i> ^<num> <person>)
-->
   (<pred> ^instance <i> -)
}

sp {action*internal-execution*apply*stop-leading*do*action-model
  (state <s> ^problem-space.name action
             ^problem-space.execution-type internal
             ^operator <o>)
  (<o> ^name op_stop-leading1
       ^arg1.id.predicates <preds>)
  (<preds> ^robot-status leading)
-->
  (<preds> ^robot-status leading -)
}

sp {action*internal-execution*apply*stop-leading*do*action-model*add*in*predicate
  (state <s> ^problem-space.name action
             ^problem-space.execution-type internal
             ^operator <o>
             ^world.robot.current-location <loc>
             ^world.predicates.predicate <pred>)
  (<o> ^name op_stop-leading1
       ^arg1.id <person>)
  (<pred> ^handle in1)
-->
  (<pred> ^instance <i>)
  (<i> ^1 <person> ^2 <loc>)
}

#####################################################
# say

sp {action*apply*say*do*action-model
   (state <s> ^problem-space.name action
              ^problem-space.execution-type internal
              ^operator <o>
              ^world.predicates.predicate <heard>)
   (<o> ^name op_say1
        ^arg1.id <msg>
        ^arg2.{2} <person>)
   (<msg> ^predicates.sentence <any>)
   (<person> ^predicates.category person)
   (<heard> ^handle heard2)
   -{(<heard> ^instance <heard-i>)
     (<heard-i> ^1 <person> ^2 <msg>)}
-->
   (<heard> ^instance <i>)
   (<i> ^1 <person> ^2 <msg>)
}

#####################################################
# ask
#
#sp {action*apply*ask*do*action-model
#   (state <s> ^problem-space.name action
#              ^problem-space.execution-type internal
#              ^operator <o>
#              ^world.objects <objs>)
#   (<o> ^name op_ask1
#
#        ^arg1.id.predicates.sentence <sent>)
#-->
#   (<objs> ^object <answer>)
#   (<answer> ^item-type object ^predicates <preds>)
#   (<preds> ^category message ^modifier1 answer1 ^sentence |answer placeholder|)
#}
#

###############################################
## open
#
## Change the door from closed to open
#sp {action*apply*open*do*action-model
#   (state <s> ^problem-space.name action
#              ^problem-space.execution-type internal
#          ^operator <op>)
#   (<op> ^name op_open1
#     ^arg1.id.predicates <preds>)
#   (<preds> ^door1 closed2)
#-->
#   (<preds> ^door1 closed2 -
#            ^door1 open2)
#}
#
###############################################
## close
#
## Change the door predicate from open to closed
#sp {action*apply*close*do*action-model
#   (state <s> ^problem-space.name action
#              ^problem-space.execution-type internal
#          ^operator <op>)
#   (<op> ^name op_close1
#     ^arg1.id.predicates <preds>)
#   (<preds> ^door1 open2)
#-->
#   (<preds> ^door1 open2 -
#            ^door1 closed2)
#}
#
###############################################
## turn-on
#
## Change the activation predicate from off to on
#sp {action*apply*turn-on*do*action-model
#   (state <s> ^problem-space.name action
#              ^problem-space.execution-type internal
#          ^operator <op>)
#   (<op> ^name op_turn-on1
#     ^arg1.id.predicates <preds>)
#   (<preds> ^activation1 off2)
#-->
#   (<preds> ^activation1 off2 -
#            ^activation1 on2)
#}
#
###############################################
## turn-off
#
## Change the activation predicate from on to off
#sp {action*apply*turn-off*do*action-model
#   (state <s> ^problem-space.name action
#              ^problem-space.execution-type internal
#          ^operator <op>)
#   (<op> ^name op_turn-off1
#     ^arg1.id.predicates <preds>)
#   (<preds> ^activation1 on2)
#-->
#   (<preds> ^activation1 on2 -
#            ^activation1 off2)
#}
#
#
###############################################
## remember
#
## Adds source on the 2nd argument
#sp {action*apply*remember*do*action-model
#   (state <s> ^problem-space.name action
#              ^problem-space.execution-type internal
#              ^operator <op>
#              -^world.objects.object <arg1>)
#   (<op> ^name op_remember1
#         ^arg1.id <arg1>
#         ^arg2.id <arg2>)
#   (<arg1> ^predicates <preds>)
#   (<arg2> ^predicates.<att> <val>)
#-->
#   (<preds> ^<att> <val>)
#}
#
#sp {action*apply*remember*do*action-model*link
#   (state <s> ^problem-space.name action
#              ^problem-space.execution-type internal
#              ^operator <op>
#              ^world.objects.object <arg1>)
#   (<op> ^name op_remember1
#         ^arg1.id <arg1>
#         ^arg2.id <arg2>)
#-->
#   (<arg1> ^linked-to <arg2>)
#}
#
##############################################
## action has until clause
#
#sp {action*apply*wait*do*action-model*until-clause*state*predicate
#   (state <s> ^problem-space.name action
#              ^problem-space.execution-type internal
#              ^operator <op>
#              ^world <world>)
#   (<op> ^name <any>
#         ^until-clause.predicate <pred>)
#   (<pred> ^type state
#           ^handle <pred-handle>
#           ^property-handle <prop-handle>
#           ^{1}.predicates <preds>)
#-->
#   (<preds> ^<prop-handle> <pred-handle>)
#}
#
#sp {action*apply*wait*do*action-model*until-clause*state*predicate*remove*others
#   (state <s> ^problem-space.name action
#              ^problem-space.execution-type internal
#              ^operator <op>
#              ^world <world>)
#   (<op> ^name <any>
#         ^until-clause.predicate <pred>)
#   (<pred> ^type state
#           ^handle <pred-handle>
#           ^property-handle <prop-handle>
#           ^{1}.predicates <preds>)
#   (<preds> ^<prop-handle> { <val> <> <pred-handle> })
#-->
#   (<preds> ^<prop-handle> <val> -)
#}
#
#sp {action*apply*wait*do*action-model*until-clause*relation*predicate
#   (state <s> ^problem-space.name action
#              ^problem-space.execution-type internal
#              ^operator <op>
#              ^world.predicates.predicate <ts-pred>)
#   (<op> ^name <any>
#         ^until-clause.predicate <pred>)
#   (<pred> ^type relation
#           ^handle <pred-handle>
#           ^1 <obj1>
#           ^2 <obj2>)
#   (<ts-pred> ^handle <pred-handle>)
#-->
#   (<ts-pred> ^instance <i>)
#   (<i> ^1 <obj1> ^2 <obj2>)
#}
#
###############################################
## wait
#
#sp {action*apply*wait*do*action-model
#   (state <s> ^problem-space.name action
#              ^problem-space.execution-type internal
#              ^operator <op>
#              ^world <world>)
#   (<op> ^name op_wait1
#         ^until-clause.predicate <pred>)
#   (<world> ^predicates.predicate <on-pred>
#            ^objects.object <steak>
#            ^objects.object <stove>)
#   (<on-pred> ^handle on1
#              ^instance <i>)
#   (<i> ^1 <steak> ^2 <stove>)
#   (<steak> ^predicates <steak-preds>)
#   (<steak-preds> ^shape steak1)
#   (<stove> ^predicates <stove-preds>)
#   (<stove-preds> ^name stove
#                  ^door1 closed2
#                  ^activation1 on2)
#   (<pred> ^type state
#           ^handle cooked1
#           ^property-handle meat1
#           ^1 <steak>)
#-->
#   (<steak-preds> ^meat1 raw1 -
#                  ^meat1 cooked1)
#}
#
###############################################
## scan
#
## Mark the current location as scanned
#sp {action*apply*turn-on*do*action-model
#   (state <s> ^problem-space.name action
#              ^problem-space.execution-type internal
#              ^operator <op>
#              ^world.robot <rob>)
#   (<op> ^name op_scan1)
#   (<rob> ^current-location <loc>
#          ^havent-scanned <loc>)
#-->
#   (<rob> ^havent-scanned <loc> -
#          ^scanned <loc>)
#}
#
## Objects the room should be confirmed
#sp {action*apply*turn-on*do*action-model
#   (state <s> ^problem-space.name action
#              ^problem-space.execution-type internal
#              ^operator <op>
#              ^world.predicates.predicate <in-pred>
#              ^world.robot.current-location <loc>
#              ^world.objects.object <obj>)
#   (<op> ^name op_scan1)
#   (<in-pred> ^handle in1
#              ^instance <i>)
#   (<i> ^1 <obj> ^2 <loc>)
#   (<obj> ^predicates <preds>)
#   (<preds> ^object-status unconfirmed)
#-->
#   (<preds> ^object-status unconfirmed -
#            ^object-status confirmed)
#}
#
#
##########################################3
## recall 
#
#sp {action*apply*recall*do*action-model
#   (state <s> ^problem-space.name action
#              ^problem-space.execution-type internal
#          ^operator <op>
#          ^world.predicates.predicate <pred>)
#   (<op> ^name op_recall1
#         ^arg1.id.linked-to <obj1>
#         ^arg2 <arg2>)
#   (<arg2> ^arg-type predicate
#           ^handle <pred-handle>
#           ^{2}.linked-to <obj2>)
#   (<pred> ^handle <pred-handle>)
#-->
#   (<pred> ^instance <i>)
#   (<i> ^1 <obj1> ^2 <obj2>)
#}
#
#sp {action*apply*recall*do*action-model*add*object*arg
#   (state <s> ^problem-space.name action
#              ^problem-space.execution-type internal
#          ^operator <op>
#          ^world.objects <objs>
#          ^world.predicates.predicate <pred>)
#   (<op> ^name op_recall1
#         ^<arg-name> <arg>)
#   (<arg> ^arg-type object
#          ^id <obj>)
#-->
#   (<objs> ^object <obj>)
#}
#
#sp {action*apply*ask*do*action-model*mark*asked
#   (state <s> ^problem-space.name action
#              ^problem-space.execution-type internal
#              ^operator <o>)
#   (<o> ^name op_ask1
#        ^arg1.id.predicates.sentence <sent>)
#-->
#   (<s> ^asked <sent>)
#}
#
#
######################################################
## say
#
#sp {action*apply*say*do*action-model
#   (state <s> ^problem-space.name action
#              ^problem-space.execution-type internal
#              ^operator <o>
#              ^world <w>)
#   (<o> ^name op_say1
#        ^arg1.id <msg>)
#   (<msg> ^predicates.category message
#          ^predicates.sentence <any>)
#   (<w> ^objects.object <person>
#        ^predicates.predicate <in>
#        ^predicates.predicate <heard>
#        ^robot.current-location <cur-loc>)
#   (<person> ^predicates.category person)
#   (<in> ^handle in1
#         ^instance <in-i>)
#   (<in-i> ^1 <person> ^2 <cur-loc>)
#   (<heard> ^handle heard2)
#   -{(<heard> ^instance <heard-i>)
#     (<heard-i> ^1 <person> ^2 <msg>)}
#-->
#   (<heard> ^instance <i>)
#   (<i> ^1 <person> ^2 <msg>)
#}
#
#sp {action*apply*say*do*action-model*linked-to
#   (state <s> ^problem-space.name action
#              ^problem-space.execution-type internal
#              ^operator <o>
#              ^world <w>)
#   (<o> ^name op_say1
#        ^arg1.id <msg>)
#   (<w> ^objects.object <person>
#        ^objects.object <other>
#        ^predicates.predicate <in>
#        ^predicates.predicate <heard>
#        ^robot.current-location <cur-loc>)
#   (<person> ^predicates.category person)
#   (<other> ^linked-to <msg>
#            ^predicates.sentence <any>)
#   (<in> ^handle in1
#         ^instance <in-i>)
#   (<in-i> ^1 <person> ^2 <cur-loc>)
#   (<heard> ^handle heard2)
#   -{(<heard> ^instance <heard-i>)
#     (<heard-i> ^1 <person> ^2 <other>)}
#-->
#   (<heard> ^instance <i> <i2>)
#   (<i> ^1 <person> ^2 <other>)
#   (<i2> ^1 <person> ^2 <msg>)
#}
#
#
