sp {retrospective-learning*propose*retrieve-subaction-episode*first
   (state <s> ^name retrospective-learning
              ^initial-episode <ep>
              ^subactions-stack <subs>)
   (<subs> ^max-episode-id <ep-id>
           ^next none)
-->
   (<s> ^operator <o> +)
   (<o> ^name retrieve-subaction-episode
        ^after-episode-id <ep-id>)
}

sp {retrospective-learning*propose*retrieve-subaction-episode*next
   (state <s> ^name retrospective-learning
              ^initial-episode <ep>
              ^subactions-stack <subs>)
   (<subs> ^max-episode-id <ep-id>
           ^next <top>
          -^retrieved-all true)
   (<top> ^learning-result success)
-->
   (<s> ^operator <o> +)
   (<o> ^name retrieve-subaction-episode
        ^after-episode-id <ep-id>)
}

sp {retrospective-learning*apply*retrieve-subaction-episode*create*cue
   (state <s> ^name retrospective-learning
              ^operator <o>
              ^epmem.command <cmd>
              ^subactions-stack <subs>
              ^action-handle <handle>)
   (<o> ^name retrieve-subaction-episode)
   (<subs> ^max-episode-id <max-id>
           ^min-episode-id <min-id>)
-->
   (<cmd> ^query <q>
          ^after <min-id>
          ^before <max-id>)
   (<q> ^action-stack.top <top>)
   (<top> ^start-of-execution true
          ^prev.execution-operator.action-handle <handle>)
}

sp {retrospective-learning*apply*retrieve-subaction-episode*success
   (state <s> ^name retrospective-learning
              ^operator.name retrieve-subaction-episode
              ^subactions-stack <subs>
              ^epmem <epmem>)
   (<epmem> ^result <res>
            ^result.retrieved <episode>
            ^command <cmd>)
   (<res> ^success <q>
          ^retrieved <episode>
          ^memory-id <ep-id>
          ^normalized-match-score 1.0)
   (<cmd> ^query <q>)
   (<subs> ^max-episode-id <old-max>
           ^next <next>)
-->
   (<subs> ^max-episode-id <old-max> -
           ^max-episode-id (- <ep-id> 5) # Subtract 5 just to make sure it's before the opearator is first selected
           ^next <next> -
           ^next <new-seg>)
   (<new-seg> ^episode <episode>
              ^episode-id <ep-id>
              ^next <next>)
   (<cmd> ^query <q> -)
}

sp {retrospective-learning*apply*retrieve-subaction-episode*failure*no*perfect*match
   (state <s> ^name retrospective-learning
              ^operator.name retrieve-subaction-episode
              ^epmem <epmem>
              ^subactions-stack <subs>)
   (<epmem> ^result.normalized-match-score < 1.0
            ^command <cmd>)
   (<cmd> ^query <q>)
-->
   (<subs> ^retrieved-all true)
   (<cmd> ^query <q> -)
}

sp {retrospective-learning*apply*retrieve-subaction-episode*failure*no*match
   (state <s> ^name retrospective-learning
              ^operator.name retrieve-subaction-episode
              ^epmem <epmem>
              ^subactions-stack <subs>)
   (<epmem> ^result.failure
            ^command <cmd>)
   (<cmd> ^query <q>)
-->
   (<subs> ^retrieved-all true)
   (<cmd> ^query <q> -)
}
